// Code generated by MockGen. DO NOT EDIT.
// Source: dependencies.go

// Package app is a generated GoMock package.
package app

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pair "github.com/project-code-io/crypto-trading-bot-go/pair"
)

// mockExchangeClient is a mock of ExchangeClient interface.
type mockExchangeClient struct {
	ctrl     *gomock.Controller
	recorder *mockExchangeClientMockRecorder
}

// mockExchangeClientMockRecorder is the mock recorder for mockExchangeClient.
type mockExchangeClientMockRecorder struct {
	mock *mockExchangeClient
}

// NewmockExchangeClient creates a new mock instance.
func NewmockExchangeClient(ctrl *gomock.Controller) *mockExchangeClient {
	mock := &mockExchangeClient{ctrl: ctrl}
	mock.recorder = &mockExchangeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *mockExchangeClient) EXPECT() *mockExchangeClientMockRecorder {
	return m.recorder
}

// GetLastPrice mocks base method.
func (m *mockExchangeClient) GetLastPrice(ctx context.Context, p pair.Pair) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastPrice", ctx, p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastPrice indicates an expected call of GetLastPrice.
func (mr *mockExchangeClientMockRecorder) GetLastPrice(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastPrice", reflect.TypeOf((*mockExchangeClient)(nil).GetLastPrice), ctx, p)
}
